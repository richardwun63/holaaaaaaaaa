// ==========================================
//      Gas ERP Ayacucho - app.js (V5.7 - Modales Implementados)
// ==========================================

document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM Cargado. Inicializando App V5.7 (Modales)...");

    // --- CONSTANTES Y VARIABLES GLOBALES ---
    const API_BASE_URL = 'http://localhost:3001/api';
    const globalConfig = { beneficiosTexto: "Cargando...", whatsappNumber: null };
    let currentUser = null; let currentCylinderTypes = []; let currentOtherProducts = [];
    let currentWarehouses = []; let selectedWarehouseId = 1;
    const fallbackData = { warehouses: [ { id: 1, name: 'Principal (Fallo)'} ], config: { whatsappNumber: '51999999999', beneficiosTexto: "Error."} };

    // --- REFERENCIAS GLOBALES ---
    const loginScreen=document.getElementById('login-screen'); const registerScreen=document.getElementById('register-screen'); const appContainer=document.getElementById('app-container'); const mainContent=document.getElementById('main-content'); const loginForm=document.getElementById('login-form'); const registerForm=document.getElementById('register-form'); const roleSelector=document.getElementById('role-selector'); const registerButton=document.getElementById('register-button'); const logoutButton=document.getElementById('logout-button'); const loginError=document.getElementById('login-error'); const registerError=document.getElementById('register-error'); const userNameDisplay=document.getElementById('user-name-display'); const userRoleDisplay=document.getElementById('user-role-display'); const userPhoto=document.getElementById('user-photo'); const currentYearSpan=document.getElementById('current-year'); const warehouseHeaderSelector=document.getElementById('warehouse-selector-header'); const globalWarehouseSelect=document.getElementById('global-warehouse-select');

    // --- INICIALIZACIÓN ---
    if(currentYearSpan)currentYearSpan.textContent=new Date().getFullYear(); setupEventListeners(); initializeScreenVisibility(); loadPublicConfigAndWarehouses();

    // --- MANEJO DE EVENTOS ---
    function setupEventListeners() { /* ... como antes ... */ }

    // --- MANEJO DE TOKEN JWT ---
    function saveToken(token) { /* ... */ } function getToken() { /* ... */ } function removeToken() { /* ... */ }

    // --- HELPER FETCH AUTENTICADO ---
    async function fetchWithAuth(url, options = {}) { /* ... como antes ... */ }

    // --- AUTENTICACIÓN ---
    async function handleLogin(e) { /* ... */ } async function handleRegister(e) { /* ... */ } function handleLogout() { /* ... */ } function toggleWarehouseSelectorHeader(role) { /* ... */ }

    // --- NAVEGACIÓN Y UI ---
    window.showScreen = (screenId) => { /* ... */ }; function updateHeaderUserInfo() { /* ... */ } function loadRoleDashboard(role) { /* ... */ } async function loadPublicConfigAndWarehouses() { /* ... */ } function populateWarehouseSelectors(container = document) { /* ... */ } function handleGlobalWarehouseChange(event) { /* ... */ } function handleDashboardWarehouseChange(event) { /* ... */ } function updateCurrentWarehouseName() { /* ... */ } function reloadDashboardWarehouseData() { /* ... */ }

    // --- DASHBOARD CLIENTE ---
    function setupClienteDashboard(){ /* ... */ } async function populateClienteOrderOptions() { /* ... */ } function getCustomerPrice(id, type) { /* ... */ } window.toggleProductQuantityInput = (cb, id) => { /* ... */ } function updatePedidoPriceEstimate() { /* ... */ } async function handlePedidoSubmit(e) { /* ... */ } async function loadClienteHistorial() { /* ... */ } window.downloadReceipt=(url)=>{window.open(API_BASE_URL.replace('/api','')+url,'_blank');} window.goToPaymentSection=()=>{ /* ... */ } function handleComprobantePreview(e){ /* ... */ } window.uploadPaymentProof=async ()=>{ /* ... */ } window.copyReferralCode=()=>{ /* ... */ } window.shareReferralCode=()=>{ /* ... */ } window.showBenefitsModal=()=>{ /* ... */ }
    // CONECTADO: Editar Perfil Cliente (con modal)
    window.openEditProfileModal=async ()=>{ console.log("Abriendo editar perfil..."); if (!currentUser) return; const modal = document.getElementById('edit-profile-modal'); if(!modal) return; modal.innerHTML = '<div class="modal-content"><span class="close-button" onclick="closeModal(\'edit-profile-modal\')">×</span><h2>Cargando...</h2><div class="loading-placeholder"><i class="fas fa-spinner fa-spin"></i></div></div>'; openModal('edit-profile-modal'); try { const response = await fetchWithAuth(`${API_BASE_URL}/users/me`); if (!response.ok) throw new Error("No se cargaron tus datos."); const userData = await response.json(); let formHtml = `<span class="close-button" onclick="closeModal('edit-profile-modal')">×</span><h2>Editar Mi Perfil</h2><form id="edit-profile-form"><input type="hidden" name="userId" value="${userData.user_id}"><div class="input-group"><label>Nombre:</label><input type="text" name="full_name" value="${userData.full_name || ''}" required></div><div class="input-group"><label>Celular 1:</label><input type="tel" name="phone_number_primary" value="${userData.phone_number_primary || ''}"></div><div class="input-group"><label>Celular 2:</label><input type="tel" name="phone_number_secondary" value="${userData.phone_number_secondary || ''}"></div><div class="input-group"><label>Email:</label><input type="email" name="email" value="${userData.email || ''}"></div>`; if(currentUser.role === 'cliente' && userData.details) { formHtml += `<div class="input-group"><label>Dirección:</label><textarea name="address_text" rows="3">${userData.details.address_text || ''}</textarea></div><div class="input-group"><label>Fecha Nac.:</label><input type="date" name="birth_date" value="${userData.details.birth_date || ''}"></div>`; } formHtml += `<button type="submit" class="btn btn-primary">Guardar</button><div id="edit-profile-error" class="error-message"></div></form>`; modal.innerHTML = `<div class="modal-content">${formHtml}</div>`; const form = modal.querySelector('#edit-profile-form'); if(form) form.addEventListener('submit', handleEditProfileSubmit); } catch (error) { modal.innerHTML = `<div class="modal-content"><span class="close-button" onclick="closeModal('edit-profile-modal')">×</span><p class="error-message">Error cargar: ${error.message}</p></div>`; } }
    async function handleEditProfileSubmit(event) { event.preventDefault(); const form = event.target; const errorDiv = document.getElementById('edit-profile-error'); if(errorDiv) errorDiv.textContent = ''; const formData = new FormData(form); const payload = Object.fromEntries(formData.entries()); delete payload.userId; console.log("Guardando perfil:", payload); try { const response = await fetchWithAuth(`${API_BASE_URL}/users/me`, { method: 'PUT', body: JSON.stringify(payload) }); const data = await response.json(); if (!response.ok) throw new Error(data.message || `Error ${response.status}`); alert("Perfil actualizado."); closeModal('edit-profile-modal'); currentUser = {...currentUser, ...payload, details: {...currentUser.details, ...payload}}; updateHeaderUserInfo(); setupClienteDashboard(); } catch (error) { console.error("Error guardar perfil:", error); if(errorDiv) errorDiv.textContent = `Error: ${error.message}`; } }
    window.requestFreeMaintenance=async ()=>{ /* ... sin cambios ... */ } window.openWhatsApp = () => { /* ... sin cambios ... */ } window.viewOrderDetails = async (orderId) => { /* ... sin cambios (conectado-alert) ... */ } window.redeemPointsHandler = async () => { /* ... sin cambios ... */ }

    // --- DASHBOARD REPARTIDOR ---
    function setupRepartidorDashboard(){ /* ... */ } function toggleHoraCobroInput(){ /* ... */ } async function checkRepartidorAssignment(){ /* ... */ } async function loadRepartidorPedidosDisponibles(){ /* ... */ } async function takeOrder(orderId) { /* ... */ } async function loadRepartidorCobrosPendientes(){ /* ... */ } async function registerPendingPayment(orderId, amount) { /* ... */ } async function loadRepartidorCuadreCaja(){ /* ... */ }
    // CONECTADO: Detalle Cuadre Repartidor (Modal)
    window.viewDetailedCashReport=async ()=>{ if(!currentUser?.id)return; const today=new Date().toISOString().split('T')[0]; console.log(`Detalle cuadre ${today} Rep ${currentUser.id}`); const modal=document.getElementById('view-details-modal'); if(!modal)return; modal.innerHTML='<div class="modal-content"><span class="close-button" onclick="closeModal(\'view-details-modal\')">×</span><h2>Cargando...</h2><div class="loading-placeholder"><i class="fas fa-spinner fa-spin"></i></div></div>'; openModal('view-details-modal'); try{const response=await fetchWithAuth(`${API_BASE_URL}/reports/reconciliation/detail?date=${today}&repartidorId=${currentUser.id}`); if(!response.ok)throw new Error(`HTTP ${response.status}: ${await response.json().then(d=>d.message).catch(()=>response.statusText)}`); const details=await response.json(); displayReportData(modal.querySelector('.modal-content'), details, `Detalle Cuadre (${today})`); /* Usa helper */ }catch(error){console.error("Error detalle cuadre:",error); modal.innerHTML=`<div class="modal-content"><span class="close-button" onclick="closeModal('view-details-modal')">×</span><p class="error-message">Error: ${error.message}</p></div>`;}};
    async function loadRepartidorHistorial(){ /* ... */ } window.startDelivery=async ()=>{ /* ... */ } window.completeDelivery=async(event)=>{ /* ... */ } window.reportIssue=async ()=>{ /* ... */ } window.openMap=(address)=>{ /* ... */ }

    // --- DASHBOARD BASE ---
    function setupBaseDashboard(){ /* ... */ } async function loadBasePedidosPendientes(){ /* ... */ } async function loadBaseRepartidoresEstado(){ /* ... */ } async function loadBaseStock(){ /* ... */ } async function loadBasePedidosActivos(){ /* ... */ } window.openAssignModal=(id,cliN,ordD)=>{ /* ... */ } window.confirmAssignment=async (orderId=null, rId=null)=>{ /* ... */ } async function loadBaseCobrosPendientesGeneral(){ /* ... */ } window.remindRepartidor=(id)=>{/* Sim */} async function loadBaseBirthdayList(){ /* ... */ } window.viewCustomerList=()=>{ /* ... */ } window.sendChatMessage=()=>{alert("Pendiente.");}
    // CONECTADO: Ajuste Puntos (Modal)
    window.adjustPoints=async ()=>{ const modal = document.getElementById('adjust-points-modal'); if(!modal) return; let formHtml = `<span class="close-button" onclick="closeModal('adjust-points-modal')">×</span><h2>Ajustar Puntos Cliente</h2><form id="adjust-points-form"><div class="input-group"><label for="adjust-points-customerId">ID Cliente:</label><input type="number" id="adjust-points-customerId" name="customerId" required></div><div class="input-group"><label for="adjust-points-change">Puntos (+/-):</label><input type="number" id="adjust-points-change" name="points_change" required></div><div class="input-group"><label for="adjust-points-reason">Razón:</label><select id="adjust-points-reason" name="reason" required><option value="manual_adjustment">Ajuste Manual</option><option value="promo_earn">Bono Promo</option><option value="birthday_bonus">Bono Cumpleaños</option><option value="order_cancellation">Cancelación Pedido</option></select></div><div class="input-group"><label for="adjust-points-notes">Notas:</label><textarea id="adjust-points-notes" name="notes"></textarea></div><button type="submit" class="btn btn-primary">Ajustar</button><div id="adjust-points-error" class="error-message"></div></form>`; modal.innerHTML = `<div class="modal-content">${formHtml}</div>`; const form = modal.querySelector('#adjust-points-form'); if(form) form.addEventListener('submit', handleAdjustPointsSubmit); openModal('adjust-points-modal'); }
    async function handleAdjustPointsSubmit(event) { event.preventDefault(); const form = event.target; const errorDiv = document.getElementById('adjust-points-error'); if(errorDiv) errorDiv.textContent = ''; const formData = new FormData(form); const payload = Object.fromEntries(formData.entries()); const customerId = payload.customerId; delete payload.customerId; // No enviar en body si va en URL if (!customerId || !payload.points_change || !payload.reason) { if(errorDiv) errorDiv.textContent = "Faltan datos."; return; } payload.points_change = parseInt(payload.points_change); console.log(`Ajustando puntos ${customerId}:`, payload); try { const response = await fetchWithAuth(`${API_BASE_URL}/customers/${customerId}/points/adjust`, { method: 'POST', body: JSON.stringify(payload) }); const data = await response.json(); if (!response.ok) throw new Error(data.message || `Error ${response.status}`); alert(data.message); closeModal('adjust-points-modal'); // TODO: Recargar vista cliente si es visible? } catch (error) { console.error("Error ajustar puntos:", error); if(errorDiv) errorDiv.textContent = `Error: ${error.message}`; } }

    // --- DASHBOARD CONTABILIDAD ---
    function setupContabilidadDashboard(){ /* ... */ } async function loadContaResumen(){ /* ... */ } function setupIncomeChart(){ /* ... */ } async function loadContaRecibosSubidos(){ /* ... (conectado) ... */ } async function loadContaPagosVerificar(){ /* ... */ } async function loadContaMorosos(){ /* ... */ } async function loadContaInventarioDetalle(){ /* ... */ } async function loadContaCuadresRepartidores(){ /* ... */ } window.findOrderForReceipt=async ()=>{ /* ... */ } window.uploadReceiptFile=async ()=>{ /* ... (conectado) ... */ } window.verifyPayment=async (paymentId, approved)=>{ /* ... */ } window.contactMoroso=(id)=>{ alert(`PENDIENTE`); } window.generateReport=async ()=>{ /* ... (conectado+display) ... */ } window.downloadReport=()=>{alert("PENDIENTE");}
    // CONECTADO: Detalle Cuadre Conta (Modal)
    window.viewCuadreDetail=async (repartidorId)=>{ if(!repartidorId)return; const reportDate=prompt("Fecha (YYYY-MM-DD):", new Date().toISOString().split('T')[0]); if(!reportDate||!reportDate.match(/^\d{4}-\d{2}-\d{2}$/)){alert("Fecha inválida.");return;} console.log(`Detalle cuadre ${reportDate} Rep ${repartidorId} desde Conta`); const modal=document.getElementById('view-details-modal'); if(!modal)return; modal.innerHTML='<div class="modal-content"><span class="close-button" onclick="closeModal(\'view-details-modal\')">×</span><h2>Cargando...</h2><div class="loading-placeholder">...</div></div>'; openModal('view-details-modal'); try{const response=await fetchWithAuth(`${API_BASE_URL}/reports/reconciliation/detail?date=${reportDate}&repartidorId=${repartidorId}`); if (!response.ok) throw new Error(`HTTP ${response.status}: ${await response.json().then(d=>d.message).catch(()=>response.statusText)}`); const details=await response.json(); displayReportData(modal.querySelector('.modal-content'), details, `Detalle Cuadre Rep #${repartidorId} (${reportDate})`, true /*flag para añadir botón cerrar*/ ); }catch(error){console.error("Error detalle cuadre conta:",error); modal.innerHTML=`<div class="modal-content"><span class="close-button" onclick="closeModal('view-details-modal')">×</span><p class="error-message">Error: ${error.message}</p></div>`;}};

    // --- DASHBOARD GERENTE ---
    function setupGerenteDashboard(){ /* ... */ } async function loadGerenteKPIs(){ /* ... */ } async function setupMonthlySalesChart(){ /* ... */ } async function loadGerenteClientes(isModal = false){ /* ... */ } window.viewClientDetails=async (userId)=>{ /* ... */ } window.openEditCustomerPricesModal=async (userId)=>{ /* ... (conectado GET) ... */ } async function handleSaveCustomerPrices(e){ /* ... */ } window.clearCustomPrices=async (userId)=>{ /* ... */ } async function loadGerenteUsers(){ /* ... */ }
    // CONECTADO: Editar Horario (con modal)
    window.editRepartidorSchedule=async (userId)=>{ const modal=document.getElementById('edit-schedule-modal'); if(!modal) return; modal.innerHTML = '<div class="modal-content"><span class="close-button" onclick="closeModal(\'edit-schedule-modal\')">×</span><div class="loading-placeholder">Cargando...</div></div>'; openModal('edit-schedule-modal'); try { const response = await fetchWithAuth(`${API_BASE_URL}/users/${userId}`); if(!response.ok) throw new Error("Empleado no."); const userData = await response.json(); if (userData.role_name !== 'repartidor') throw new Error("No es repartidor."); let formHtml = `<span class="close-button" onclick="closeModal('edit-schedule-modal')">×</span><h2>Editar Horario</h2><form id="edit-schedule-form-gerente-${userId}"><input type="hidden" name="userId" value="${userId}"><p>Usuario: <strong>${userData.full_name}</strong></p><div class="input-group"><label>Inicio:</label><input type="time" name="schedule_start" value="${userData.schedule_start || ''}"></div><div class="input-group"><label>Fin:</label><input type="time" name="schedule_end" value="${userData.schedule_end || ''}"></div><button type="submit" class="btn btn-primary">Guardar</button><button type="button" class="btn btn-secondary" onclick="clearSchedule(${userId})">Limpiar</button><div id="edit-schedule-error-${userId}" class="error-message"></div></form>`; modal.innerHTML = `<div class="modal-content">${formHtml}</div>`; const form = modal.querySelector(`#edit-schedule-form-gerente-${userId}`); if(form) form.addEventListener('submit', handleEditScheduleSubmit); } catch (error) { modal.innerHTML = `<div class="modal-content"><span class="close-button" onclick="closeModal('edit-schedule-modal')">×</span><p class="error-message">Error: ${error.message}</p></div>`; } }
    async function handleEditScheduleSubmit(event) { event.preventDefault(); const form = event.target; const userId = form.querySelector('input[name="userId"]')?.value; const errorDiv = form.querySelector('.error-message'); if(errorDiv) errorDiv.textContent = ''; if(!userId) return; const formData = new FormData(form); const payload = Object.fromEntries(formData.entries()); delete payload.userId; console.log(`Actualizando horario ${userId}:`, payload); try { const response = await fetchWithAuth(`${API_BASE_URL}/users/${userId}/schedule`, { method: 'PUT', body: JSON.stringify(payload) }); const data = await response.json(); if (!response.ok) throw new Error(data.message || `Error ${response.status}`); alert("Horario actualizado."); closeModal('edit-schedule-modal'); loadGerenteUsers(); } catch (error) { console.error("Error guardar horario:", error); if(errorDiv) errorDiv.textContent = `Error: ${error.message}`; } }
    async function loadGerenteInventarioData(){ /* ... */ } function populatePrestamoProveedorForm(){ /* ... */ } async function handlePrestamoProveedorSubmit(e){ /* ... */ } window.returnSupplierLoanHandler = async (loanId) => { /* ... */ } async function loadGerenteConfig(){ /* ... */ } window.saveWhatsAppConfig = async () => { /* ... */ } window.savePuntosConfig=async ()=>{ /* ... */ }
    window.manageWarehouses=async ()=>{ await loadWarehouseList(); openModal('warehouse-modal'); /* Abrir modal para mostrar lista y botón crear */ } // Conectado Listar
    async function loadWarehouseList() { const modal=document.getElementById('warehouse-modal'); if (!modal) return; let contentHtml = `<span class="close-button" onclick="closeModal('warehouse-modal')">×</span><h2>Gestionar Almacenes</h2><ul id="warehouse-list-modal" class="item-list-simple"><li><i class="fas fa-spinner fa-spin"></i></li></ul><button class="btn btn-success btn-sm" onclick="createWarehouseHandler()">+ Nuevo</button>`; modal.innerHTML = `<div class="modal-content">${contentHtml}</div>`; const listUl = modal.querySelector('#warehouse-list-modal'); try { const response = await fetchWithAuth(`${API_BASE_URL}/warehouses`); if(!response.ok) throw new Error(`HTTP ${response.status}`); const warehouses = await response.json(); listUl.innerHTML = ''; if (!warehouses || warehouses.length === 0) { listUl.innerHTML = '<li>No hay almacenes</li>'; return; } warehouses.forEach(w => { const li = document.createElement('li'); const statusText = w.is_active ? 'Activo' : 'Inactivo'; const statusClass = w.is_active ? 'status-activo' : 'status-inactivo'; const safeName = JSON.stringify(w.name); const safeAddress = JSON.stringify(w.address || ''); const toggleOnClick = `toggleWarehouseStatusHandler(${w.warehouse_id}, ${!w.is_active})`; const editOnClick = `updateWarehouseHandler(${w.warehouse_id}, ${safeName}, ${safeAddress})`; li.innerHTML = `<span class="item-details">${w.name} (${statusText}) - ${w.address||'S/D'}</span><span class="item-actions"><button class="btn btn-sm btn-info" onclick="${editOnClick}"><i class="fas fa-edit"></i></button><button class="btn ${w.is_active?'btn-danger':'btn-success'} btn-sm" onclick="${toggleOnClick}"><i class="fas ${w.is_active?'fa-toggle-off':'fa-toggle-on'}"></i></button></span>`; listUl.appendChild(li); }); } catch (error) { console.error("Error listar almacenes:", error); if(listUl) listUl.innerHTML = '<li class="error-message">Error carga</li>'; } }
    window.createWarehouseHandler = async () => { const name = prompt("Nombre nuevo almacén:"); const address = prompt("Dirección (opcional):"); if(!name) { alert("Nombre obligatorio."); return; } try { const response = await fetchWithAuth(`${API_BASE_URL}/warehouses`, { method: 'POST', body: JSON.stringify({ name, address }) }); const data = await response.json(); if (!response.ok) throw new Error(data.message || `Error ${response.status}`); alert("Almacén creado."); loadWarehouseList(); } catch (error) { alert(`Error: ${error.message}`); } }
    window.updateWarehouseHandler = async (id, currentName, currentAddress) => { const name = prompt("Nuevo nombre:", currentName); const address = prompt("Nueva dirección:", currentAddress); const payload = {}; if (name && name !== currentName) payload.name = name; if (address !== undefined && address !== currentAddress) payload.address = address; if (Object.keys(payload).length === 0) return; try { const response = await fetchWithAuth(`${API_BASE_URL}/warehouses/${id}`, { method: 'PUT', body: JSON.stringify(payload) }); const data = await response.json(); if (!response.ok) throw new Error(data.message || `Error ${response.status}`); alert("Almacén actualizado."); loadWarehouseList(); } catch (error) { alert(`Error: ${error.message}`); } }
    window.toggleWarehouseStatusHandler = async (id, newStatus) => { if (!confirm(`¿${newStatus?'Activar':'Desactivar'} almacén ID ${id}?`)) return; try { const response = await fetchWithAuth(`${API_BASE_URL}/warehouses/${id}/status`, { method: 'PUT', body: JSON.stringify({ is_active: newStatus }) }); const data = await response.json(); if (!response.ok) throw new Error(data.message || `Error ${response.status}`); alert("Estado almacén actualizado."); loadWarehouseList(); } catch (error) { alert(`Error: ${error.message}`); } }
    window.manageOtherProducts=async ()=>{ await loadOtherProductList(); openModal('other-product-modal'); } // Conectado Listar
    async function loadOtherProductList() { const modal=document.getElementById('other-product-modal'); if(!modal) return; let contentHtml = `<span class="close-button" onclick="closeModal('other-product-modal')">×</span><h2>Gestionar Otros Productos</h2><ul id="otherproduct-list-modal" class="item-list-simple"><li><i class="fas fa-spinner fa-spin"></i></li></ul><button class="btn btn-success btn-sm" onclick="createOtherProductHandler()">+ Nuevo</button>`; modal.innerHTML = `<div class="modal-content">${contentHtml}</div>`; const listUl = modal.querySelector('#otherproduct-list-modal'); try { const response = await fetchWithAuth(`${API_BASE_URL}/products/others`); if (!response.ok) throw new Error(`HTTP ${response.status}`); const products = await response.json(); listUl.innerHTML = ''; if (!products || products.length === 0) { listUl.innerHTML = '<li>No hay productos</li>'; return; } products.forEach(p => { const li = document.createElement('li'); const statusText = p.is_available ? 'Activo' : 'Inactivo'; const statusClass = p.is_available ? 'status-activo' : 'status-inactivo'; const safeId=p.product_id; const safeName=JSON.stringify(p.name); const safePrice=p.price; const safeUnit=JSON.stringify(p.stock_unit); const editOnClick=`editOtherProductHandler(${safeId}, ${safeName}, ${safePrice}, ${safeUnit})`; const toggleOnClick=`toggleOtherProductStatusHandler(${safeId}, ${!p.is_available})`; li.innerHTML = `<span class="item-details">${p.name} (S/${parseFloat(p.price).toFixed(2)}) <span class="status-tag ${statusClass}">${statusText}</span></span><span class="item-actions"><button class="btn btn-sm btn-info" onclick="${editOnClick}"><i class="fas fa-edit"></i></button><button class="btn ${p.is_available?'btn-danger':'btn-success'} btn-sm" onclick="${toggleOnClick}"><i class="fas ${p.is_available?'fa-toggle-off':'fa-toggle-on'}"></i></button></span>`; listUl.appendChild(li); }); } catch (error) { console.error("Error listar otros prod:", error); if(listUl) listUl.innerHTML = '<li class="error-message">Error carga</li>'; } }
    window.createOtherProductHandler = async () => { const name = prompt("Nombre producto:"); const priceStr = prompt("Precio:"); const price = parseFloat(priceStr); if (!name || !price || price <= 0) { alert("Datos inválidos."); return; } try { const response = await fetchWithAuth(`${API_BASE_URL}/products/others`, { method: 'POST', body: JSON.stringify({ name, price }) }); const data = await response.json(); if (!response.ok) throw new Error(data.message || `Error ${response.status}`); alert("Producto creado."); loadOtherProductList(); } catch (error) { alert(`Error: ${error.message}`); } }
    window.editOtherProductHandler = async (id, currName, currPrice, currUnit) => { const name=prompt("Nombre:", currName); const priceStr=prompt(`Precio (S/${currPrice.toFixed(2)}):`); const price=priceStr?parseFloat(priceStr):null; const unit=prompt("Unidad:", currUnit); const payload={}; if(name&&name!==currName)payload.name=name; if(price!==null&&price>0&&price!==currPrice)payload.price=price; if(unit&&unit!==currUnit)payload.stock_unit=unit; if(Object.keys(payload).length===0){alert("No cambios.");return;} try{const response=await fetchWithAuth(`${API_BASE_URL}/products/others/${id}`,{method:'PUT',body:JSON.stringify(payload)}); const data=await response.json(); if(!response.ok)throw new Error(data.message||`Error ${response.status}`); alert("Producto actualizado."); loadOtherProductList();} catch(error){alert(`Error: ${error.message}`);}}
    window.toggleOtherProductStatusHandler = async (id, newStatus) => { if (!confirm(`¿${newStatus?'Activar':'Desactivar'} producto ID ${id}?`)) return; try { const response = await fetchWithAuth(`${API_BASE_URL}/products/others/${id}/status`, { method: 'PUT', body: JSON.stringify({ is_available: newStatus }) }); const data = await response.json(); if (!response.ok) throw new Error(data.message || `Error ${response.status}`); alert("Estado producto actualizado."); loadOtherProductList(); } catch (error) { alert(`Error: ${error.message}`); } }
    window.manageRepartidorSchedules=()=>{ alert("Use botón <i class='fas fa-clock'></i> en lista Empleados.");} // Mensaje actualizado
    // CONECTADO: Crear Empleado (Usa modal HTML)
    window.openCreateUserModal=()=>{ const modal=document.getElementById('create-user-modal'); if(!modal)return; const whSelect=modal.querySelector('#create-warehouse'); if(whSelect){whSelect.innerHTML='<option value="">-- Ninguno --</option>'; currentWarehouses.forEach(w=>{whSelect.innerHTML+=`<option value="${w.warehouse_id}">${w.name}</option>`;});} const errDiv=modal.querySelector('#create-user-error'); if(errDiv)errDiv.textContent=''; const form=modal.querySelector('#create-user-form-gerente'); if(form){form.reset(); form.removeEventListener('submit',handleCreateUserGerente); form.addEventListener('submit',handleCreateUserGerente);} openModal('create-user-modal'); }
    async function handleCreateUserGerente(e){ e.preventDefault(); const form=e.target; const errorDiv = document.getElementById('create-user-error'); if(errorDiv) errorDiv.textContent = ''; const formData=new FormData(form); const payload=Object.fromEntries(formData.entries()); if (!payload.username || !payload.password || !payload.full_name || !payload.role_name) { if(errorDiv) errorDiv.textContent = "Faltan campos obligatorios."; return; } console.log("Creando empleado:", payload); try { const response = await fetchWithAuth(`${API_BASE_URL}/users`, { method: 'POST', body: JSON.stringify(payload) }); const data = await response.json(); if(!response.ok) throw new Error(data.message || `Error ${response.status}`); alert("Empleado creado (Real)."); closeModal('create-user-modal'); loadGerenteUsers(); } catch (error){ console.error("Error crear empleado:", error); if(errorDiv) errorDiv.textContent=`Error: ${error.message}`; } }
    // CONECTADO: Editar Empleado (Usa modal JS)
    window.editUser=async (userId)=>{ const modal=document.getElementById('edit-user-modal'); if(!modal) return; modal.innerHTML = '<div class="modal-content"><span class="close-button" onclick="closeModal(\'edit-user-modal\')">×</span><div class="loading-placeholder">...</div></div>'; openModal('edit-user-modal'); try { const response = await fetchWithAuth(`${API_BASE_URL}/users/${userId}`); if (!response.ok) throw new Error("Empleado no."); const userData = await response.json(); let formHtml = `<span class="close-button" onclick="closeModal('edit-user-modal')">×</span><h2>Editar Empleado</h2><form id="edit-user-form-gerente-${userId}"><input type="hidden" name="userId" value="${userId}"><div class="input-group"><label>Nombre:</label><input type="text" name="full_name" value="${userData.full_name||''}" required></div><div class="input-group"><label>Username:</label><input type="text" name="username" value="${userData.username||''}" required></div><div class="input-group"><label>Cel1:</label><input type="tel" name="phone_number_primary" value="${userData.phone_number_primary||''}"></div><div class="input-group"><label>Cel2:</label><input type="tel" name="phone_number_secondary" value="${userData.phone_number_secondary||''}"></div><div class="input-group"><label>Email:</label><input type="email" name="email" value="${userData.email||''}"></div><div class="input-group"><label>Almacén:</label><select name="default_warehouse_id"><option value="">-- Ninguno --</option>`; currentWarehouses.forEach(w => { formHtml += `<option value="${w.warehouse_id}" ${userData.default_warehouse_id == w.warehouse_id ? 'selected' : ''}>${w.name}</option>`; }); formHtml += `</select></div><button type="submit" class="btn btn-primary">Guardar</button><div id="edit-user-error-${userId}" class="error-message"></div></form>`; modal.innerHTML = `<div class="modal-content">${formHtml}</div>`; const form = modal.querySelector(`#edit-user-form-gerente-${userId}`); if(form) form.addEventListener('submit', handleEditUserSubmit); } catch (error) { modal.innerHTML = `<div class="modal-content"><span class="close-button" onclick="closeModal('edit-user-modal')">×</span><p class="error-message">Error: ${error.message}</p></div>`; } }
    async function handleEditUserSubmit(event) { event.preventDefault(); const form = event.target; const userId = form.querySelector('input[name="userId"]')?.value; const errorDiv = form.querySelector('.error-message'); if(errorDiv) errorDiv.textContent = ''; if(!userId) return; const formData = new FormData(form); const payload = Object.fromEntries(formData.entries()); delete payload.userId; console.log(`Actualizando user ${userId}:`, payload); try { const response = await fetchWithAuth(`${API_BASE_URL}/users/${userId}`, { method: 'PUT', body: JSON.stringify(payload) }); const data = await response.json(); if (!response.ok) throw new Error(data.message || `Error ${response.status}`); alert(`Empleado ${userId} actualizado.`); closeModal('edit-user-modal'); loadGerenteUsers(); } catch (error) { console.error("Error guardar empleado:", error); if(errorDiv) errorDiv.textContent = `Error: ${error.message}`; } }
    window.toggleUserStatus=async (userId, newStatus)=>{ /* ... sin cambios (conectado) ... */ }
    window.clearSchedule=async (userId)=>{ const modal = document.getElementById('edit-schedule-modal'); // Obtener ID desde el modal si está abierto if (modal && modal.style.display === 'block') { const userIdInModal = modal.querySelector('#edit-schedule-userId')?.value; if(Number(userIdInModal) !== Number(userId)) { console.warn("ID de modal no coincide con clearSchedule"); } // Podríamos cerrar el modal aquí closeModal('edit-schedule-modal'); } if(!confirm(`Limpiar horario repartidor ID ${userId}?`)) return; try { const response = await fetchWithAuth(`${API_BASE_URL}/users/${userId}/schedule`, { method: 'DELETE' }); const data = await response.json(); if(!response.ok) throw new Error(data.message || `Error ${response.status}`); alert(`Horario limpiado ${userId}.`); loadGerenteUsers(); } catch (error) { console.error("Error limpiar horario:", error); alert(`Error: ${error.message}`); } } // Modificado para cerrar modal si está abierto
    window.deleteEmployee=async (userId)=>{ /* ... sin cambios (conectado) ... */ }
    window.markAsDamaged=async ()=>{ /* ... sin cambios (conectado con prompt) ... */ }
    window.generateAdvancedReport=async ()=>{ /* ... sin cambios (conectado a placeholder) ... */ }

    // --- FUNCIONES DE UTILIDAD ---
    window.openModal = (id) => { const m=document.getElementById(id); if(m)m.style.display='block'; }
    window.closeModal = (id) => { const m=document.getElementById(id); if(m) { m.style.display='none'; m.innerHTML=''; /* Limpiar contenido */ } } // Limpia contenido
    window.onclick = function(e){ if(e.target?.classList?.contains('modal')){closeModal(e.target.id);} }
    function formatStatus(key){ /* ... sin cambios ... */ }
    window.openTab = (evt, tabName) => { /* ... sin cambios ... */ }
    window.getCurrentLocation=()=>{ /* ... sin cambios ... */ }
    function showGlobalError(message){ console.error("ERROR GLOBAL:", message); alert(`Error: ${message}`); }
    function displayReportData(containerElement, data, title = "Reporte", addCloseButton = false) { if (!containerElement) return; let contentHTML = addCloseButton ? `<span class="close-button" onclick="closeModal('view-details-modal')">×</span>` : ''; contentHTML += `<h4>${title}</h4>`; const reportArray = data?.details || (Array.isArray(data) ? data : (data ? [data] : [])); if (!Array.isArray(reportArray) || reportArray.length === 0) { contentHTML += "<p>No hay datos.</p>"; if (data?.message && reportArray.length === 0) contentHTML += `<p><small>${data.message}</small></p>`; } else { contentHTML += '<div class="table-responsive"><table class="table">'; const headers = Object.keys(reportArray[0]); contentHTML += '<thead><tr>'; headers.forEach(h => { const cH = h.replace(/_/g, ' ').replace(/^\w/, c => c.toUpperCase()); contentHTML += `<th>${cH}</th>`; }); contentHTML += '</tr></thead>'; contentHTML += '<tbody>'; reportArray.forEach(row => { contentHTML += '<tr>'; headers.forEach(h => { let v = row[h]; try { if (typeof v === 'string' && v.match(/^\d{4}-\d{2}-\d{2}/)) { v = new Date(v + 'T00:00:00Z').toLocaleDateString('es-PE',{ timeZone:'UTC', day:'2-digit', month:'2-digit', year:'numeric' }); } else if (typeof v === 'number' && !Number.isInteger(v) && String(v).includes('.')) v = v.toFixed(2); else if (v === null || v === undefined) v = '-'; } catch(e){} contentHTML += `<td>${v}</td>`; }); contentHTML += '</tr>'; }); contentHTML += '</tbody></table></div>'; } containerElement.innerHTML = contentHTML; } // Modificado para añadir botón cerrar opcionalmente

    // --- Inicializar Visibilidad ---
    function initializeScreenVisibility() { /* ... sin cambios ... */ }

    // --- Ejecutar Inicialización ---
    try { initializeScreenVisibility(); console.log("Init UI OK V5.2."); } catch (error) { console.error("Error FATAL inicialización:", error); document.body.innerHTML = `<div style="padding:20px;color:red;border:1px solid red;">Error.<br><small>${error.message}</small></div>`; }

}); // Fin del DOMContentLoaded